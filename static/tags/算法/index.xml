<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 笔记网站</title>
    <link>https://borongcheng.github.io/static/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 笔记网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>私有财产</copyright>
    <lastBuildDate>Thu, 11 Sep 2025 14:00:54 +0000</lastBuildDate>
    <atom:link href="https://borongcheng.github.io/static/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>递归</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/06%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 11 Sep 2025 14:00:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/06%E9%80%92%E5%BD%92/</guid>
      <description>一、定义 递归是一种通过调用自身来解决问题的编程技巧或算法。 在递归的过程中将问题分解为规模较小的子问题，并通过调用自身来解决这些子问题，最终将</description>
    </item>
    <item>
      <title>动态规划</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/07%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Thu, 11 Sep 2025 14:00:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/07%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>一、定义 1、什么是动态规划？ 动态规划（Dynamic programing，简称DP），是一种在数学、管理学科、计算机科学，经济学和生物信息学</description>
    </item>
    <item>
      <title>二叉树</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/17%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Thu, 11 Sep 2025 14:00:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/17%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>一、定义 二叉树搜索问题 深度优先遍历 DFS（Depth First Search） 是一种用于图和树的遍历算法，其核心思想是尽可能的搜索每一个分支，到达最深</description>
    </item>
    <item>
      <title>贪心算法</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/08%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 11 Sep 2025 14:00:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/08%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>一、定义 什么是贪心算法？ 贪心算法(greedy algorithm)，又称贪婪算法，是一种在每一步选择中都采取当前状态下最好或最优的选择，从而</description>
    </item>
    <item>
      <title>最小生成树</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/21%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</link>
      <pubDate>Thu, 11 Sep 2025 14:00:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/21%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</guid>
      <description>一、定义 最小生成树（Minimum Spancning Tree），是指在一个连接加权无向图中找到一个树（即无环连通子图），使得这个树包含所有顶点，且所有边的加</description>
    </item>
    <item>
      <title>排序算法</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/04%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 09 Sep 2025 16:30:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/04%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>一、定义 选择排序 冒泡排序 插入排序 归并排序 是一种基于分治思想的排序，它将待排序数组分成若干个子数组，然后递归的对这些子数组进行排序，最后将子数</description>
    </item>
    <item>
      <title>对数器</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/02%E5%AF%B9%E6%95%B0%E5%99%A8/</link>
      <pubDate>Mon, 08 Sep 2025 16:00:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/02%E5%AF%B9%E6%95%B0%E5%99%A8/</guid>
      <description>一、定义 随机行为 对数器原理</description>
    </item>
    <item>
      <title>位运算</title>
      <link>https://borongcheng.github.io/static/specialized/algorithm/01%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 07 Sep 2025 16:52:54 +0000</pubDate>
      <guid>https://borongcheng.github.io/static/specialized/algorithm/01%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>一、定义 二进制及其基本位运算 打印一个数的二进制形式 不用中间变量交换两个数 找到出现次数奇数次数的数 找到出现K次的数 N皇后问题的加速实现 位图 位运</description>
    </item>
  </channel>
</rss>
